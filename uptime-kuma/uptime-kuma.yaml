apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: uptime-kuma-ingress
spec:
  tls:
    - hosts:
        - kuma.c3.themikkel.dk
      secretName: tls-cert
  rules:
    - host: kuma.c3.themikkel.dk
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kuma-service
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: kuma-service
spec:
  selector:
    app: uptime-kuma
  type: ClusterIP
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: uptime-kuma
      protocol: TCP
      port: 80
      targetPort: 3001
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: uptime-kuma
spec:
  selector:
    matchLabels:
      app: uptime-kuma # has to match .spec.template.metadata.labels
  serviceName: "uptime-kuma"
  replicas: 1 # by default is 1
  template:
    metadata:
      labels:
        app: uptime-kuma # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: uptime-kuma
          image: louislam/uptime-kuma:1.18.5
          ports:
            - containerPort: 3001
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
          imagePullPolicy: IfNotPresent
          readinessProbe:
            httpGet:
              path: /
              port: 3001
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: uptime-kuma-data
              mountPath: /app/data
  volumeClaimTemplates:
    - metadata:
        name: uptime-kuma-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "longhorn"
        resources:
          requests:
            storage: 1Gi

